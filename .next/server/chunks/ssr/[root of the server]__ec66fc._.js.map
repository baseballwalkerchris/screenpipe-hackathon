{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/src/app/page.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/src/app/page.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/src/lib/actions/get-start-date.ts"],"sourcesContent":["\"use server\";\n\nimport { isAfter } from \"date-fns\";\n\nexport async function getStartDate() {\n\ttry {\n\t\tconst videoChunkQuery = `\n         SELECT\n            f.timestamp,\n            f.offset_index,\n            ot.text,\n            ot.app_name,\n            ot.window_name,\n            vc.device_name as screen_device,\n            vc.file_path as video_path\n         FROM frames f\n         JOIN video_chunks vc ON f.video_chunk_id = vc.id\n         LEFT JOIN ocr_text ot ON f.id = ot.frame_id\n         ORDER BY f.timestamp ASC, f.offset_index ASC\n         LIMIT 1\n\n`;\n\n\t\tconst audioChunkQuery = `\n         SELECT\n                at.timestamp,\n                at.transcription,\n                at.device as audio_device,\n                at.is_input_device,\n                ac.file_path as audio_path\n         FROM audio_transcriptions at\n         JOIN audio_chunks ac ON at.audio_chunk_id = ac.id\n         ORDER BY at.timestamp ASC\n         LIMIT 1\n`;\n\n\t\tconst videoFetch = fetch(\"http://localhost:3030/raw_sql\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({ query: videoChunkQuery }),\n\t\t});\n\n\t\tconst audioFetch = fetch(\"http://localhost:3030/raw_sql\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({ query: audioChunkQuery }),\n\t\t});\n\n\t\tconst [videoData, audioData] = await Promise.all([videoFetch, audioFetch]);\n\n\t\tif (!videoData.ok || !audioData.ok) {\n\t\t\treturn {\n\t\t\t\terror: \"error occured while getting data\",\n\t\t\t\tvideo: await videoData.json(),\n\t\t\t\taudio: await audioData.json(),\n\t\t\t\tquery: {\n\t\t\t\t\tvideoChunkQuery,\n\t\t\t\t\taudioChunkQuery,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst video = (await videoData.json())[0];\n\t\tconst audio = (await audioData.json())[0];\n\n\t\tconst videoStart = new Date(video.timestamp);\n\t\tconst audioStart = new Date(audio.timestamp);\n\n\t\tconst videoGreater = isAfter(videoStart, audioStart);\n\n\t\treturn !videoGreater ? videoStart : audioStart;\n\t} catch (e) {\n\t\treturn {\n\t\t\terror: \"errro occured\",\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;;;;AAEA;;;;AAEO,eAAe,uCAAU,GAAV;IACrB,IAAI;QACH,MAAM,kBAAkB,CAAC;;;;;;;;;;;;;;;AAe3B,CAAC;QAEC,MAAM,kBAAkB,CAAC;;;;;;;;;;;AAW3B,CAAC;QAEC,MAAM,aAAa,MAAM,iCAAiC;YACzD,QAAQ;YACR,SAAS;gBACR,gBAAgB;YACjB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAgB;QAC/C;QAEA,MAAM,aAAa,MAAM,iCAAiC;YACzD,QAAQ;YACR,SAAS;gBACR,gBAAgB;YACjB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAgB;QAC/C;QAEA,MAAM,CAAC,WAAW,UAAU,GAAG,MAAM,QAAQ,GAAG,CAAC;YAAC;YAAY;SAAW;QAEzE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE;YACnC,OAAO;gBACN,OAAO;gBACP,OAAO,MAAM,UAAU,IAAI;gBAC3B,OAAO,MAAM,UAAU,IAAI;gBAC3B,OAAO;oBACN;oBACA;gBACD;YACD;QACD;QAEA,MAAM,QAAQ,CAAC,MAAM,UAAU,IAAI,EAAE,CAAC,CAAC,EAAE;QACzC,MAAM,QAAQ,CAAC,MAAM,UAAU,IAAI,EAAE,CAAC,CAAC,EAAE;QAEzC,MAAM,aAAa,IAAI,KAAK,MAAM,SAAS;QAC3C,MAAM,aAAa,IAAI,KAAK,MAAM,SAAS;QAE3C,MAAM,eAAe,CAAA,GAAA,sIAAA,CAAA,UAAO,AAAD,EAAE,YAAY;QAEzC,OAAO,CAAC,eAAe,aAAa;IACrC,EAAE,OAAO,GAAG;QACX,OAAO;YACN,OAAO;QACR;IACD;AACD;;;IA5EsB;;AAAA,+OAAA"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/src/lib/actions/has-frames-date.ts"],"sourcesContent":["\"use server\";\n\nexport async function hasFramesForDate(date: Date) {\n\ttry {\n\t\t// Set up start and end of the day\n\t\tconst startOfDay = new Date(date);\n\t\tstartOfDay.setHours(0, 0, 0, 0);\n\n\t\tconst endOfDay = new Date(date);\n\t\tendOfDay.setHours(23, 59, 59, 999);\n\n\t\tconst query = `\n            SELECT COUNT(*) as frame_count\n            FROM frames f\n            WHERE f.timestamp >= '${startOfDay.toISOString()}'\n            AND f.timestamp <= '${endOfDay.toISOString()}'\n            LIMIT 1\n        `;\n\n\t\tconst response = await fetch(\"http://localhost:3030/raw_sql\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({ query }),\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\treturn {\n\t\t\t\terror: \"Error occurred while checking frames\",\n\t\t\t\tdetails: await response.json(),\n\t\t\t};\n\t\t}\n\n\t\tconst result = await response.json();\n\t\treturn result[0]?.frame_count > 0;\n\t} catch (e) {\n\t\treturn {\n\t\t\terror: \"Error occurred while checking frames\",\n\t\t\tdetails: e,\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;AAEO,eAAe,uCAAc,GAAd,iBAAiB,IAAU;IAChD,IAAI;QACH,kCAAkC;QAClC,MAAM,aAAa,IAAI,KAAK;QAC5B,WAAW,QAAQ,CAAC,GAAG,GAAG,GAAG;QAE7B,MAAM,WAAW,IAAI,KAAK;QAC1B,SAAS,QAAQ,CAAC,IAAI,IAAI,IAAI;QAE9B,MAAM,QAAQ,CAAC;;;kCAGiB,EAAE,WAAW,WAAW,GAAG;gCAC7B,EAAE,SAAS,WAAW,GAAG;;QAEjD,CAAC;QAEP,MAAM,WAAW,MAAM,MAAM,iCAAiC;YAC7D,QAAQ;YACR,SAAS;gBACR,gBAAgB;YACjB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;YAAM;QAC9B;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACjB,OAAO;gBACN,OAAO;gBACP,SAAS,MAAM,SAAS,IAAI;YAC7B;QACD;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,OAAO,MAAM,CAAC,EAAE,EAAE,cAAc;IACjC,EAAE,OAAO,GAAG;QACX,OAAO;YACN,OAAO;YACP,SAAS;QACV;IACD;AACD;;;IAxCsB;;AAAA,+OAAA"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/src/lib/actions/video-actions.ts"],"sourcesContent":["\"use server\";\n\nimport { readFile } from \"node:fs/promises\";\nimport { resolve } from \"node:path\";\n\nexport async function getMediaFile(\n\tfilePath: string,\n): Promise<{ data: string; mimeType: string }> {\n\ttry {\n\t\tconst absolutePath = resolve(filePath);\n\t\tconst buffer = await readFile(absolutePath);\n\t\t// convert to base64\n\t\tconst data = buffer.toString(\"base64\");\n\n\t\tconst getMimeType = (path: string): string => {\n\t\t\tconst ext = path.split(\".\").pop()?.toLowerCase();\n\t\t\tconst isAudio =\n\t\t\t\tpath.toLowerCase().includes(\"input\") ||\n\t\t\t\tpath.toLowerCase().includes(\"output\");\n\n\t\t\tswitch (ext) {\n\t\t\t\tcase \"mp4\":\n\t\t\t\t\treturn \"video/mp4\";\n\t\t\t\tcase \"webm\":\n\t\t\t\t\treturn \"video/webm\";\n\t\t\t\tcase \"ogg\":\n\t\t\t\t\treturn \"video/ogg\";\n\t\t\t\tcase \"mp3\":\n\t\t\t\t\treturn \"audio/mpeg\";\n\t\t\t\tcase \"wav\":\n\t\t\t\t\treturn \"audio/wav\";\n\t\t\t\tdefault:\n\t\t\t\t\treturn isAudio ? \"audio/mpeg\" : \"video/mp4\";\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdata,\n\t\t\tmimeType: getMimeType(filePath),\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(\"failed to read media file:\", error);\n\t\tthrow new Error(\n\t\t\t`failed to read media file: ${error instanceof Error ? error.message : \"unknown error\"}`,\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEO,eAAe,uCAAU,GAAV,aACrB,QAAgB;IAEhB,IAAI;QACH,MAAM,eAAe,CAAA,GAAA,iHAAA,CAAA,UAAO,AAAD,EAAE;QAC7B,MAAM,SAAS,MAAM,CAAA,GAAA,qIAAA,CAAA,WAAQ,AAAD,EAAE;QAC9B,oBAAoB;QACpB,MAAM,OAAO,OAAO,QAAQ,CAAC;QAE7B,MAAM,cAAc,CAAC;YACpB,MAAM,MAAM,KAAK,KAAK,CAAC,KAAK,GAAG,IAAI;YACnC,MAAM,UACL,KAAK,WAAW,GAAG,QAAQ,CAAC,YAC5B,KAAK,WAAW,GAAG,QAAQ,CAAC;YAE7B,OAAQ;gBACP,KAAK;oBACJ,OAAO;gBACR,KAAK;oBACJ,OAAO;gBACR,KAAK;oBACJ,OAAO;gBACR,KAAK;oBACJ,OAAO;gBACR,KAAK;oBACJ,OAAO;gBACR;oBACC,OAAO,UAAU,eAAe;YAClC;QACD;QAEA,OAAO;YACN;YACA,UAAU,YAAY;QACvB;IACD,EAAE,OAAO,OAAO;QACf,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,IAAI,MACT,CAAC,2BAA2B,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;IAE1F;AACD;;;IAzCsB;;AAAA,+OAAA"}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AA0BA,8BAA8B;AAzB9B,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;AAWtB,OAAO,MAAMG,eAAe;AAG5B,EAAC;;;;;;;;;;AAED,cAAc,qCAAoC,sBAAA;AAElD,UAAA,kDAA4D;AAC5D,MAAA,CAAO,MAAMK;IAAAA;IAAAA,SAAc,IAAIX,mBAAmB;YAChDY,QAAAA;YAAAA,GAAY;YAAA;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;gBAAA,QAAA;oBAAA,IAAA;oBAAA;iBAAA;;eACNC,UAAU;;SACV,2CAA2C;cAC3CC,IAAAA;YAAAA,GAAY,GAAA;iBACZC,MAAAA,IAAU,IAAA;wBAAA;4BACVC,KAAAA,CAAAA,GAAAA,2KAAAA,CAAAA,KAAU,EAAE,eAAA,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACd,OAAA,GAAA,iTAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACAC,MAAU,CAAA,YAAA,CAAA;;qBACRC,YAAYnB;aACd;QACF,CAAE;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/node_modules/date-fns/constants.js"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;CAeC,GAED;;;;CAIC;;;;;;;;;;;;;;;;;;;;;;;;;;AACM,MAAM,aAAa;AAenB,MAAM,aAAa;AAgBnB,MAAM,UAAU,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK;AAgBjD,MAAM,UAAU,CAAC;AAOjB,MAAM,qBAAqB;AAO3B,MAAM,oBAAoB;AAO1B,MAAM,uBAAuB;AAO7B,MAAM,qBAAqB;AAO3B,MAAM,uBAAuB;AAO7B,MAAM,gBAAgB;AAOtB,MAAM,iBAAiB;AAOvB,MAAM,eAAe;AAOrB,MAAM,gBAAgB;AAOtB,MAAM,kBAAkB;AAOxB,MAAM,eAAe;AAOrB,MAAM,iBAAiB;AAOvB,MAAM,gBAAgB;AAOtB,MAAM,kBAAkB;AAOxB,MAAM,eAAe,gBAAgB;AAOrC,MAAM,gBAAgB,eAAe;AAOrC,MAAM,gBAAgB,eAAe;AAOrC,MAAM,iBAAiB,gBAAgB;AAOvC,MAAM,mBAAmB,iBAAiB;AAa1C,MAAM,sBAAsB,OAAO,GAAG,CAAC","ignoreList":[0]}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/node_modules/date-fns/constructFrom.js"],"sourcesContent":["import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n"],"names":[],"mappings":";;;;AAAA;;AAqCO,SAAS,cAAc,IAAI,EAAE,KAAK;IACvC,IAAI,OAAO,SAAS,YAAY,OAAO,KAAK;IAE5C,IAAI,QAAQ,OAAO,SAAS,YAAY,wIAAA,CAAA,sBAAmB,IAAI,MAC7D,OAAO,IAAI,CAAC,wIAAA,CAAA,sBAAmB,CAAC,CAAC;IAEnC,IAAI,gBAAgB,MAAM,OAAO,IAAI,KAAK,WAAW,CAAC;IAEtD,OAAO,IAAI,KAAK;AAClB;uCAGe","ignoreList":[0]}},
    {"offset": {"line": 638, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 644, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/node_modules/date-fns/toDate.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"names":[],"mappings":";;;;AAAA;;AAwCO,SAAS,OAAO,QAAQ,EAAE,OAAO;IACtC,iDAAiD;IACjD,OAAO,CAAA,GAAA,4IAAA,CAAA,gBAAa,AAAD,EAAE,WAAW,UAAU;AAC5C;uCAGe","ignoreList":[0]}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 661, "column": 0}, "map": {"version":3,"sources":["file:///Users/christophercheng/Desktop/Projects/screenpipe-hackathon/node_modules/date-fns/isAfter.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param date - The date that should be after the other one to return true\n * @param dateToCompare - The date to compare with\n *\n * @returns The first date is after the second date\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nexport function isAfter(date, dateToCompare) {\n  return +toDate(date) > +toDate(dateToCompare);\n}\n\n// Fallback for modularized imports:\nexport default isAfter;\n"],"names":[],"mappings":";;;;AAAA;;AAoBO,SAAS,QAAQ,IAAI,EAAE,aAAa;IACzC,OAAO,CAAC,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD,EAAE,QAAQ,CAAC,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD,EAAE;AACjC;uCAGe","ignoreList":[0]}},
    {"offset": {"line": 671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}